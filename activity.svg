<svg xmlns="http://www.w3.org/2000/svg" width="480" height="444" class="">
    <defs>
        <style/>
    </defs>
    <style>@keyframes animation-gauge{0%{stroke-dasharray:0 329}}@keyframes animation-fade{0%{opacity:0}to{opacity:1}}@keyframes animation-rainbow{0%,to{color:#7f00ff;fill:#7f00ff}14%{color:#a933ff;fill:#a933ff}29%{color:#007fff;fill:#007fff}43%{color:#00ff7f;fill:#00ff7f}57%{color:#ff0;fill:#ff0}71%{color:#ff7f00;fill:#ff7f00}86%{color:red;fill:red}}svg{font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji;font-size:14px;color:#777}h2{margin:8px 0 2px;padding:0;color:#0366d6;font-weight:400;font-size:16px}h2 svg{fill:currentColor}section&gt;.field{margin-left:5px;margin-right:5px}.field{display:flex;align-items:center;margin-bottom:2px;white-space:nowrap}.field svg{margin:0 8px;fill:#959da5;flex-shrink:0}.field.error{color:#cb2431}.field.error svg{fill:#cb2431}.row{display:flex;flex-wrap:wrap}.row section{flex:1 1 0}#metrics-end,.fill-width{width:100%}.stargazers .chartist .ct-post{fill:rgba(127,127,127,.8)!important;color:rgba(127,127,127,.8)!important;font-size:9px;text-anchor:middle}.post{align-items:flex-start}.repository{display:flex;flex-direction:column;width:100%;margin:6px 0}.activity{margin-bottom:12px}.activity .field{width:100%;overflow:hidden;text-overflow:ellipsis;max-width:450px;white-space:nowrap;margin-bottom:0}.activity .field .content{flex-grow:1;text-overflow:ellipsis;overflow:hidden}.activity .issue,.activity .repo{display:inline;color:#58a6ff}.activity .code,code,span.code{background-color:#7777771f;border-radius:6px;color:#777;padding:1px 5px;font-size:80%;font-family:SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace}.activity .code,span.code{margin:0 4px -3px}.activity .details{padding-left:38px;display:flex;flex-direction:column;font-size:13px;color:#666}.activity .details&gt;.comment{overflow:hidden;text-overflow:ellipsis;display:block;width:420px;margin-top:6px;border-left:3px solid #777777b2;padding-left:6px;display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical}.people{padding:0 10px}.licenses{display:flex}.field.license.details{display:flex;justify-content:space-between}code{display:inline-block}code[class^=language-]{white-space:pre-wrap;width:97%;margin-top:4px}.token.comment{color:#690}.token.trimmed{font-style:italic;color:#77777760}.space{margin-left:7px}:root{--color-calendar-graph-day-bg:#ebedf0;--color-calendar-graph-day-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L1-bg:#9be9a8;--color-calendar-graph-day-L2-bg:#40c463;--color-calendar-graph-day-L3-bg:#30a14e;--color-calendar-graph-day-L4-bg:#216e39;--color-calendar-halloween-graph-day-L1-bg:#ffee4a;--color-calendar-halloween-graph-day-L2-bg:#ffc501;--color-calendar-halloween-graph-day-L3-bg:#fe9600;--color-calendar-halloween-graph-day-L4-bg:#03001c;--color-calendar-graph-day-L4-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L3-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L2-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L1-border:rgba(27,31,35,0.06)}</style>
    <style/>
    <foreignObject x="0" y="0" width="100%" height="100%">
        <div xmlns="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink" class="items-wrapper">
            <section>
                <h2 class="field">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                        <path fill-rule="evenodd" d="M0 8a8 8 0 1116 0v5.25a.75.75 0 01-1.5 0V8a6.5 6.5 0 10-13 0v5.25a.75.75 0 01-1.5 0V8zm5.5 4.25a.75.75 0 01.75-.75h3.5a.75.75 0 010 1.5h-3.5a.75.75 0 01-.75-.75zM3 6.75C3 5.784 3.784 5 4.75 5h6.5c.966 0 1.75.784 1.75 1.75v1.5A1.75 1.75 0 0111.25 10h-6.5A1.75 1.75 0 013 8.25v-1.5zm1.47-.53a.75.75 0 011.06 0l.97.97.97-.97a.75.75 0 011.06 0l.97.97.97-.97a.75.75 0 111.06 1.06l-1.5 1.5a.75.75 0 01-1.06 0L8 7.81l-.97.97a.75.75 0 01-1.06 0l-1.5-1.5a.75.75 0 010-1.06z"/>
                    </svg>
                    Recent activity
                </h2>
                <div class="row">
                    <section>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path fill-rule="evenodd" d="M2.75 2.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h2a.75.75 0 01.75.75v2.19l2.72-2.72a.75.75 0 01.53-.22h4.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25H2.75zM1 2.75C1 1.784 1.784 1 2.75 1h10.5c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0113.25 12H9.06l-2.573 2.573A1.457 1.457 0 014 13.543V12H2.75A1.75 1.75 0 011 10.25v-7.5z"/>
                                    </svg>
                                    <div class="content">
                                        Commented on
                                        <span class="issue">#5697 No valid value for license appropriate for proprietary code</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div>opened by ygale in <span class="repo">haskell/cabal</span></div>
                                    <div class="comment">
                                        It is a case that deletion of the
                                        <code>license</code>
                                        field is allowed - so that is already implemented. So that is solved, would reedit my comment.
But I arrived here, because I am in the process of making a different report.
                                    </div>
                                </div>
                            </section>
                        </div>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path fill-rule="evenodd" d="M2.75 2.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h2a.75.75 0 01.75.75v2.19l2.72-2.72a.75.75 0 01.53-.22h4.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25H2.75zM1 2.75C1 1.784 1.784 1 2.75 1h10.5c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0113.25 12H9.06l-2.573 2.573A1.457 1.457 0 014 13.543V12H2.75A1.75 1.75 0 011 10.25v-7.5z"/>
                                    </svg>
                                    <div class="content">
                                        Commented on
                                        <span class="issue">#5697 No valid value for license appropriate for proprietary code</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div>opened by ygale in <span class="repo">haskell/cabal</span></div>
                                    <div class="comment">
                                        Using terminology from
                                        <code>Distribution.License.License</code>
                                        :
                                        <code>AllRightsReserved</code>
                                        can be used, but that is while logical - not ideal, because "All rights reserved" is a default case, and if some custom proprietary license is given - the license is not
                                        <code>AllRightsReserved</code>
                                        .
                                        <code>OtherLicense</code>
                                        can be used, but Cabal does not accept
                                        <code>license: OtherLicense</code>
                                        , or
                                        <code>Other</code>
                                        or
                                        <code>Custom</code>
                                        neither it gives a helpful error message on how to do it, in best variant message sent to https://spdx.org/licenses/, which does not have any information how to mark a
                                        <code>other</code>
                                        or
                                        <code>custom</code>
                                        license.
"The SPDX License List ... is a list of commonly found licenses and exceptions used in free and open or collaborative software, data, hardware, or documentation." so SPDX list as is - sending to it hardly suits any proprietary scenario, it works for OS/FS licenses but not even for default case of
                                        <code>NONE/UnspecifiedLicense/All Rights Reserved</code>
                                        Allowing to omit the field is a good way of solving this. Hackage in any case on code upload should check licenses for rights of distribution, where is logic to solve that through requiring/extensively checking the
                                        <code>license</code>
                                        field.
The presence of
                                        <code>License</code>
                                        file is enough to enforce license judicially, so even if people forget to put a
                                        <code>license</code>
                                        field - either Hackage would notify them, either Nixpkgs (which also has license field requirements), if people post code aka on the GitHub &amp; forget
                                        <code>license</code>
                                        field - it is their code &amp; their thing to solve &amp; report can be opened asking about the license &amp; just attaching the file into Git repository would be enough - even
                                        <code>.cabal</code>
                                        file may not be changed.
And all that would make default case, proprietary situation &amp; lawyers happy, as omitting the
                                        <code>license</code>
                                        field would mean the Either
                                        <code>default case (AllRightsReserved)</code>
                                        OR
                                        <code>License file determines license</code>
                                        .
To default
                                        <code>cabal init</code>
                                        to default legal case in all countries of the world, or to default for a particular license for Free Software reasons - either one seems fair game.
P.S.
If it was my decision - I'd LGPLed everything by default, as proprietary firms/lawyers should be satisfied with free-of-change software provided for free as-is for commercial use - if they are not satisfied with getting stuff for free - I'd show them the chin flick gesture, I see no reasons not to at least LGPL the distributable software (software packages) if people care about software engineering development.

So I agree with the last messages: https://github.com/haskell/cabal/issues/5697#issuecomment-475963482
The simples solution: live as is &amp; just allow people to discover that they can delete the
                                        <code>license</code>
                                        field.
                                    </div>
                                </div>
                            </section>
                        </div>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path fill-rule="evenodd" d="M2.75 2.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h2a.75.75 0 01.75.75v2.19l2.72-2.72a.75.75 0 01.53-.22h4.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25H2.75zM1 2.75C1 1.784 1.784 1 2.75 1h10.5c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0113.25 12H9.06l-2.573 2.573A1.457 1.457 0 014 13.543V12H2.75A1.75 1.75 0 011 10.25v-7.5z"/>
                                    </svg>
                                    <div class="content">
                                        Commented on
                                        <span class="issue">#1016 `--check` causes `&lt;&lt;loop&gt;&gt;` for basic expressions</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div>opened by runeksvendsen in <span class="repo">haskell-nix/hnix</span></div>
                                    <div class="comment">
                                        Looked into the
                                        <code>lookupVarReader</code>
                                        code semantically.
So far not found the cause, but the process definitely approaches closer.
If to use only the dynamic scope search - the process terminates:
                                        <code class="language-multiline" xml:space="preserve">cabal run hnix -- --check --expr '
                                                                   let {
<span class="token trimmed">(12 more lines were trimmed)</span></code>
                                        Soon would ship the simplified version of the code &amp; it would be easier to look further.
Maybe in
                                        <code>asks $ view hasLens</code>
                                        for lexical scope the lens happens to be an infinite one.
                                    </div>
                                </div>
                            </section>
                        </div>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path fill-rule="evenodd" d="M2.75 2.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h2a.75.75 0 01.75.75v2.19l2.72-2.72a.75.75 0 01.53-.22h4.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25H2.75zM1 2.75C1 1.784 1.784 1 2.75 1h10.5c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0113.25 12H9.06l-2.573 2.573A1.457 1.457 0 014 13.543V12H2.75A1.75 1.75 0 011 10.25v-7.5z"/>
                                    </svg>
                                    <div class="content">
                                        Commented on
                                        <span class="issue">#2539 Streamline getDocumentationTryGhc</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div>opened by Anton-Latukha in <span class="repo">haskell/haskell-language-server</span></div>
                                    <div class="comment">
                                        Overall, I'd liked to keep explicit return types of
                                        <code>getDocumentation{,s}TryGhc</code>
                                        of
                                        <code>IO (Either GHC.ErrorMessages (Name, Either GetDocsFailure (Maybe HsDocString, Maybe (IntMap HsDocString))))</code>
                                        - it puts those complex return procedure explicitly. Before this, the error was thrown into a monad &amp; was required to be/was caught immediately up the stack, for now it became
                                        <code>Either</code>
                                        &amp; allowed me to do safety guaranteed changes working with the code.
Having exceptions explicitly in the types also allowed to figure out how to do rebasing onto GHC 9.2 changes &amp; the API changes of GHC.
Having
                                        <code>Map Name (Maybe HsDocString, Maybe (IntMap HsDocString)</code>
                                        also would be helpful for further work on arg docs. Before this code pretended to have argdocs always, stubbing the Nothing case, which not helped with thinking how to parse &amp; provision them. First I need to know precisely what
                                        <code>IntMap</code>
                                        holds in which cases &amp; precisely when
                                        <code>Nothing</code>
                                        is returned. Having explicit types helps to guide and align the code.
After current changes are figured-out, code may return to trow/catching the exceptions, but I'd highly preferred to have
                                        <code>Map Name (Maybe HsDocString, Maybe (IntMap HsDocString)</code>
                                        or maybe
                                        <code>HashMap Name (Maybe HsDocString, Maybe (IntMap HsDocString)</code>
                                        .
                                    </div>
                                </div>
                            </section>
                        </div>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path d="M8 9.5a1.5 1.5 0 100-3 1.5 1.5 0 000 3z"/>
                                        <path fill-rule="evenodd" d="M8 0a8 8 0 100 16A8 8 0 008 0zM1.5 8a6.5 6.5 0 1113 0 6.5 6.5 0 01-13 0z"/>
                                    </svg>
                                    <div class="content">
                                        Opened
                                        <span class="issue">#1057 Check lazyness of datastructures</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div>opened  in <span class="repo">haskell-nix/hnix</span></div>
                                </div>
                            </section>
                        </div>
                    </section>
                </div>
            </section>
        </div>
        <div xmlns="http://www.w3.org/1999/xhtml" id="metrics-end"></div>
    </foreignObject>
</svg>